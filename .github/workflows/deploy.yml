name: Deploy & start server

on: 
  push:
    branches: ['main', 'auto-backup-server-data']
  workflow_dispatch:

permissions:
  id-token: write
  contents: write
  deployments: write

env:
  REGION: us-east-1
  SERVER_VERSION: 'latest' # Optionally, you can change this to a specific version (i.e., "1.18")
  AUTO_SHUTDOWN_ENABLED: true

jobs:
  get-server-jar-url:
    runs-on: ubuntu-latest
    outputs:
      SERVER_JAR_URL: ${{ steps.get_download_url.outputs.SERVER_JAR_URL }}
      TARGET_VERSION: ${{ steps.get_download_url.outputs.TARGET_VERSION }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@master

      - name: Setup node
        uses: actions/setup-node@master
        with:
          node-version: "16.14.2"

      - name: install dependencies
        working-directory: VersionScraper
        run: npm install
      
      - name: Find Download URL
        id: get_download_url
        working-directory: VersionScraper
        run: |
          npm start
          echo "SERVER_JAR_URL=$(cat url.txt)" >> $GITHUB_OUTPUT
          echo "TARGET_VERSION=$(cat targetVersion.txt)" >> $GITHUB_OUTPUT
  
  deploy:
    needs: get-server-jar-url
    runs-on: ubuntu-latest
    outputs:
      SERVER_IP_ADDRESS: ${{ steps.deploy-server.outputs.SERVER_IP }}
      SSH_KEY_PAIR: ${{ steps.deploy-server.outputs.KEY_PAIR_NAME }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@master

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_ARN }}
          aws-region: ${{ env.REGION }}

      - name: Deploy Server (AWS Stack)
        id: deploy-server
        run: |
          sam deploy --region $REGION --parameter-overrides 'Email="${{ secrets.EMAIL }}"'

          STACK_NAME=$(cat samconfig.toml| grep "stack_name =" | awk '{print $3}' | tr -d '"')

          EC2_IP_ADDRESS=$(aws cloudformation describe-stacks --region $REGION --stack-name $STACK_NAME --query 'Stacks[0].Outputs[?OutputKey==`IPAddress`].OutputValue' --output text)
          echo "SERVER_IP=$EC2_IP_ADDRESS" >> $GITHUB_OUTPUT

          KEY_PAIR_NAME=$(aws cloudformation describe-stacks --region $REGION --stack-name $STACK_NAME --query 'Stacks[0].Outputs[?OutputKey==`SSHKeyPairName`].OutputValue' --output text)
          echo "KEY_PAIR_NAME=$KEY_PAIR_NAME" >> $GITHUB_OUTPUT

  start:
    needs: [get-server-jar-url, deploy]
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.deploy.outputs.SERVER_IP_ADDRESS }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@master

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_ARN }}
          aws-region: ${{ env.REGION }}

      - name: Get current date & time for backup data
        run: echo "TIMESTAMP=$(date '+%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV

      - name: Start server
        id: start-server
        env:
          SERVER_JAR_URL: ${{ needs.get-server-jar-url.outputs.SERVER_JAR_URL }}
          TARGET_VERSION: ${{ needs.get-server-jar-url.outputs.TARGET_VERSION }}
          EC2_IP_ADDRESS: ${{ needs.deploy.outputs.SERVER_IP_ADDRESS }}
          SSH_KEY_PAIR: ${{ needs.deploy.outputs.SSH_KEY_PAIR }}
        run: |
          aws ssm get-parameter --name $SSH_KEY_PAIR --region $REGION --with-decryption --query 'Parameter.Value' --output text > key.pem
          chmod 600 key.pem

          EC2_INSTANCE_ID=$(aws ec2 describe-instances --region $REGION --filters "Name=ip-address,Values=$EC2_IP_ADDRESS" --query "Reservations[*].Instances[*].[InstanceId]" --output text)
          EC2_INSTANCE_STATUS=$(aws ec2 describe-instance-status --region $REGION --instance-id $EC2_INSTANCE_ID --query "InstanceStatuses[?InstanceId=='$EC2_INSTANCE_ID'].InstanceState.Name")

          until [ "$EC2_INSTANCE_STATUS" == "running" ]; do
            echo "Starting EC2 Instance..."
            aws ec2 start-instances --instance-ids $EC2_INSTANCE_ID
            sleep 30
            EC2_INSTANCE_STATUS=$(aws ec2 describe-instance-status --region $REGION --instance-id $EC2_INSTANCE_ID --query "InstanceStatuses[?InstanceId=='$EC2_INSTANCE_ID'].InstanceState.Name" --output text)
          done

          echo "Copying script (manager.sh) to server"
          rsync -e "ssh -i key.pem -o StrictHostKeyChecking=no" manager.sh ubuntu@$EC2_IP_ADDRESS:~/.

          if [ -d "assets" ]; then
            echo "Copying assets to server"
            rsync -e "ssh -i key.pem -o StrictHostKeyChecking=no" -r assets/ ubuntu@$EC2_IP_ADDRESS:server
          fi

          ssh -i key.pem -o "StrictHostKeyChecking no" ubuntu@$EC2_IP_ADDRESS "
          export TARGET_VERSION=${TARGET_VERSION}
          export SERVER_JAR_URL=${{ env.SERVER_JAR_URL }}
          echo ${{ env.AUTO_SHUTDOWN_ENABLED }} > cron_enabled.txt
          
          chmod +x manager.sh

          ./manager.sh setup
          ./manager.sh start
          ./manager.sh startAutoShutdown

          zip server.zip -r server
          "
          scp -i key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@$EC2_IP_ADDRESS:server.zip tmp.zip
          mkdir backups/$TIMESTAMP
          unzip tmp.zip -d backups/$TIMESTAMP
          echo "BACKUPS dir:"
          ls backups
          



      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        with:
          commit_message: "Sync Server assets & create backup"
          file_pattern: 'backups/* assets/*'

