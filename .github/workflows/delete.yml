name: Delete server

on: workflow_dispatch

permissions:
  id-token: write
  contents: write
  deployments: write

env:
  REGION: us-east-1

jobs:
  get-server-ip:
    runs-on: ubuntu-latest
    outputs:
      SERVER_IP_ADDRESS: ${{ steps.get-server-ip-address.outputs.SERVER_IP }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@master

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_ARN }}
          aws-region: ${{ env.REGION }}

      - name: Get Server IP
        id: get-server-ip-address
        run: |
          EC2_IP_ADDRESS=$(aws cloudformation describe-stacks --region $REGION --query 'Stacks[0].Outputs[?OutputKey==`IPAddress`].OutputValue' --output text)
          echo "::set-output name=SERVER_IP::$EC2_IP_ADDRESS"

  delete:
    needs: get-server-ip
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.get-server-ip.outputs.SERVER_IP_ADDRESS }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@master

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_ARN }}
          aws-region: ${{ env.REGION }}

      - name: Perform data backup
        id: start-server
        env:
          EC2_IP_ADDRESS: ${{ needs.get-server-ip.outputs.SERVER_IP_ADDRESS }}
        run: |
          STACK_NAME=$(cat samconfig.toml| grep "stack_name =" | awk '{print $3}' | tr -d '"')

          SSH_KEY_PAIR=$(aws cloudformation describe-stacks --region $REGION --stack-name $STACK_NAME --query 'Stacks[0].Outputs[?OutputKey==`SSHKeyPairName`].OutputValue' --output text)

          aws ssm get-parameter --name $SSH_KEY_PAIR --region $REGION --with-decryption --query 'Parameter.Value' --output text > key.pem
          chmod 600 key.pem


          EC2_INSTANCE_ID=$(aws ec2 describe-instances --region $REGION --filters "Name=ip-address,Values=$EC2_IP_ADDRESS" --query "Reservations[*].Instances[*].[InstanceId]" --output text)
          EC2_INSTANCE_STATUS=$(aws ec2 describe-instance-status --region $REGION --instance-id $EC2_INSTANCE_ID --query "InstanceStatuses[?InstanceId=='$EC2_INSTANCE_ID'].InstanceState.Name")

          until [ "$EC2_INSTANCE_STATUS" == "running" ]; do
            echo "Starting EC2 Instance..."
            aws ec2 start-instances --instance-ids $EC2_INSTANCE_ID
            sleep 30
            EC2_INSTANCE_STATUS=$(aws ec2 describe-instance-status --region $REGION --instance-id $EC2_INSTANCE_ID --query "InstanceStatuses[?InstanceId=='$EC2_INSTANCE_ID'].InstanceState.Name" --output text)
          done

          ssh -i key.pem -o "StrictHostKeyChecking no" ubuntu@$EC2_IP_ADDRESS "
          zip server.zip -r server
          "

          echo "Syncing server data"
          scp -i key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@$EC2_IP_ADDRESS:server.zip tmp.zip

          unzip tmp.zip -d ${{ runner.temp }}
          mkdir backups/$TIMESTAMP

          cp ${{ runner.temp }}/server/*.json assets/.
          cp ${{ runner.temp }}/server/server.properties assets/.
          cp ${{ runner.temp }}/server/server-icon.png assets/.
          cp -r ${{ runner.temp }}/server/logs backups/$TIMESTAMP
          cp -r ${{ runner.temp }}/server/world backups/$TIMESTAMP

      - name: 'Commit assets & backup'
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        with:
          commit_message: "Sync server assets & create backup"
          file_pattern: 'backups/* assets/*'

      - uses: chrnorm/deployment-action@v2
        name: Create GitHub deployment
        id: deployment
        with:
          token: '${{ github.token }}'
          environment: ${{ needs.get-server-ip.outputs.SERVER_IP_ADDRESS }}
          description: 'Deleting server'

      - name: Delete Stack
        run: sam delete --region $REGION --no-prompts

      - name: Set GitHub environment status (show the server is inactive on GitHub)
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          state: 'inactive'
          environment: ${{ needs.get-server-ip.outputs.SERVER_IP_ADDRESS }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
