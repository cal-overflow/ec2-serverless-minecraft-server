name: Stop server

on: workflow_dispatch

permissions:
  id-token: write
  contents: write
  deployments: write

env:
  REGION: us-east-1
  KEY_FILE: key-pair.pem

jobs:
  shutdown:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_ARN }}
          aws-region: ${{ env.REGION }}

      - name: Get Server IP
        id: get-server-ip
        run: |
          EC2_IP_ADDRESS=$(aws cloudformation describe-stacks --region $REGION --query 'Stacks[0].Outputs[?OutputKey==`IPAddress`].OutputValue' --output text)
          echo "::set-output name=SERVER_IP::$EC2_IP_ADDRESS"

      - uses: chrnorm/deployment-action@v2
        name: Create GitHub deployment
        id: deployment
        with:
          token: '${{ github.token }}'
          environment: ${{ steps.get-server-ip.outputs.SERVER_IP }}
          description: 'Shutting down server'

      - name: Shutdown server
        env:
          EC2_IP_ADDRESS: ${{ steps.get-server-ip.outputs.SERVER_IP }}
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ${{ env.KEY_FILE }}
          chmod 600 ${{ env.KEY_FILE }}

          ssh -i $KEY_FILE -o "StrictHostKeyChecking no" ubuntu@$EC2_IP_ADDRESS "
          ./manager.sh stop

          echo "Zipping server data"
          zip server.zip -r server
          "

          scp -i key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@$EC2_IP_ADDRESS:server.zip tmp.zip

          echo "Shutting down EC2 instance"
          ssh -i $KEY_FILE -o "StrictHostKeyChecking no" ubuntu@$EC2_IP_ADDRESS "
          sudo shutdown now
          " || SSH_EXIT_CODE=$?

          if [ "${SSH_EXIT_CODE}" == "255" ]; then
            echo "Server shutdown successfully"
            exit 0
          fi

          exit $SSH_EXIT_CODE

      - name: Sync server data
        env:
          EC2_IP_ADDRESS: ${{ needs.deploy.outputs.SERVER_IP_ADDRESS }}
        run: |
          echo "Syncing server data"

          unzip tmp.zip -d ${{ runner.temp }}
          mkdir backups/$TIMESTAMP

          cp ${{ runner.temp }}/server/*.json assets/.
          cp ${{ runner.temp }}/server/server.properties assets/.
          cp ${{ runner.temp }}/server/server-icon.png assets/.
          cp -r ${{ runner.temp }}/server/logs backups/$TIMESTAMP
          cp -r ${{ runner.temp }}/server/world backups/$TIMESTAMP


      - name: 'Commit assets & backup'
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        with:
          commit_message: "Sync server assets & create backup"
          file_pattern: 'backups/* assets/*'

      - name: Set GitHub environment status (show the server is inactive on GitHub)
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          state: 'inactive'
          environment: ${{ steps.get-server-ip.outputs.SERVER_IP }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
